$.fn.datepicker.dates.es = { days: "Domingo Lunes Martes Miercoles Jueves Viernes S\u00e1bado".split(" "), daysShort: "Dom Lun Mar Mie Jue Vie Sab".split(" "), daysMin: "Do Lu Ma Mi Ju Vi Sa".split(" "), months: "Enero Febrero Marzo Abril Mayo Junio Julio Agosto Setiembre Octubre Noviembre Diciembre".split(" "), monthsShort: "Ene Feb Mar Abr May Jun Jul Ago Set Oct Nov Dic".split(" "), today: "Hoy", clear: "Limpiar", titleFormat: "MM yyyy" };

var validaSimple = {

    __isEmpty: function (e) {
        return "string" == typeof e && !e.trim() || "undefined" == typeof e || null === e
    },

    inputTexts: function (a, c) {
        var msg = $(a),
            that = this,
            g = !0;

        $.each(c, function (a, b) {
            var f = $(b.id);
            if (that.__isEmpty(f.val()))
                return msg.html("Debe ingresar un valor para <strong>" + b.label + "</strong>"),
                    f.focus(),
                    g = !1;
            if ("undefined" != b.minsize && f.val().length < b.minsize)
                return msg.text(b.label + " debe tener como m\u00ednimo " + b.minsize + " caracteres"),
                    f.focus(),
                    g = !1
        }); return g
    },

    inputSelect: function (a, c) {
        var d = $(a),
        e = !0;
        $.each(c, function (a, c) {
            var b = $(c.id);
            if (0 == $(c.id).find(":selected").length)
                return d.html("Debe seleccionar un valor de la lista <strong>" + c.label + "</strong>"),
                    b.focus(),
                    e = !1
        });
        return e
    }
};

var Helper = {
    /**
    *   Llena un cotrol HTML Select, con datos invocados a un metodo ajax  
    *   pasandole un parametro (id), los valores son devueltos y llenados en un control select (obj) si 
    *   se proporciona un valor por defecto para el selector,este se envia por el parametro "def".
    *
    *   @param {string} met -   Metodo ajax
    *   @param {string} sid -   Parametro 
    *   @param {object} obj -   Objeto <Select> Html.
    *   @param {string} [def] - Valor por defecto que mostrará el control
    *
    *   Ejemplo: 
    *   Helper.ajaxSelectList(ajax.gmnd, cta.OrganoServicio.CID, this.$mnd, cta.Moneda.CID);
    */
    ajaxSelectList: function (met, id, obj, def) {
        var arr = [];
        try {
            obj.empty();
            $("<option> CARGANDO ... </option>").appendTo(obj);
            $.getJSON(met, { sid: id }, function (d) {
                var err = d.ERR;
                if (err == null || err == '' || err == "null") {
                    var dat = d.DATA;
                    if (dat != null && dat != "" && dat != "null") {
                        $.each(dat, function (id, option) {
                            arr.push("<option value='" + option.Value + "'>" + option.Text + "</option>");
                        });

                        obj.empty().append(arr.join(''));

                        if (def != null && def !== "") {
                            obj.val(def);
                        }
                    }
                    else {
                        obj.empty();
                        $("<option value='0'> * NO SE ENCONTRARON DATOS *</option>").appendTo(obj);
                    }
                }
                else {
                    toastr.error(err);
                }
            })
            .error(function (jqXHR, textStatus, errorThrown) {
                toastr.error("Solicitud de servidor fallida. Error:" + textStatus);
            });
        }
        catch (e) {
            toastr.error("Error en solicitud: " + e.message);
        }
    },

    /**
    *   Procesa un pedido asíncrono
    *
    *   @param {string} url     -   Url
    *   @param {string} params  -   Objeto parámetro
    *   @param {object} success -   Función de retorno
    *
    *   Ejemplo: 
    *   Helper.ajaxProcess(ajax.gmnd, params, sucessFunction);
    */
    ajaxProcess: function (url, params, successFunction) {
        var response;
        var request = $.ajax({
            cache: false,
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(params),
            dataType: "json",
            type: "POST",
            url: url,
            success: function (e) {
                response = e;
                if (typeof (successFunction) == 'function') {
                    successFunction(e);
                }
            },
            failure: function (msg) {
                alert(msg);
                response = msg;
            },
            error: function (xhr, status, error) {
                alert(error);
                response = error;
            }
        });
        return response;
    },

    /** 
    *   Devuelve un valor numerico a partir de una fecha
    *   
    *   @param {string} d - Fecha [ddmmyyyy]
    */
    getDateNumber: function (d) {
        var s = '01011901';
        if ("" == d || d == null || d == NaN) return parseInt(s);

        a = d.split("/");
        var s = a[2].concat(a[1]).concat(a[0]);
        return parseInt(s);
    },

    /**
    *   Valida si una fecha 'a' es menor que la fecha 'b'
    *
    *   @param {string} a - Fecha [ddmmyyyy]
    *   @param {string} b - Fecha [ddmmyyyy]
    *
    *   Ejemplo: 
    *   checkDateltDate('20180101','20190512')
    */
    checkDateltDate: function (a, b) {
        var i = this.getDateNumber(a);
        var j = this.getDateNumber(b);
        return (i < j);
    },

    /**
    *   Valida si una fecha 'a' es mayor que la fecha 'b'
    *
    *   @param {string} a - Fecha [ddmmyyyy]
    *   @param {string} b - Fecha [ddmmyyyy]
    *
    *   Ejemplo: 
    *   checkDateltDate('20180101','20190512')
    */
    checkDatemtDate: function (a, b) {
        var i = this.getDateNumber(a);
        var j = this.getDateNumber(b);
        return (i > j);
    },

    /**
    *   Devuelve la fecha en formato dd/mm/yyyy
    *
    *   Ejemplo: 
    *   var e = getFormatDate()
    */
    getFormatDate: function () {
        var date = new Date();
        var year = date.getFullYear();
        var month = (1 + date.getMonth()).toString();
        month = month.length > 1 ? month : '0' + month;

        var day = date.getDate().toString();
        day = day.length > 1 ? day : '0' + day;

        return day + '/' + month + '/' + year;
    }
};

var TextAreaObject = {
    MAX_AREA: 255,
    countChar: function (obj, objtext) {
        var len = obj.value.length;
        if (len >= this.MAX_AREA) {
            obj.value = obj.value.substring(0, this.MAX_AREA);
            $(objtext).text("Limite máximo alcanzado.");
        } else {
            var len_txt = ((this.MAX_AREA - len) > 1) ? " caracteres" : " caracter";
            $(objtext).text("max. " + (this.MAX_AREA - len) + len_txt);
        }
    }
}


var numeroALetras = (function () {

    // Código basado en https://gist.github.com/alfchee/e563340276f89b22042a
    function Unidades(num) {

        switch (num) {
            case 1: return 'UN';
            case 2: return 'DOS';
            case 3: return 'TRES';
            case 4: return 'CUATRO';
            case 5: return 'CINCO';
            case 6: return 'SEIS';
            case 7: return 'SIETE';
            case 8: return 'OCHO';
            case 9: return 'NUEVE';
        }

        return '';
    }//Unidades()

    function Decenas(num) {

        let decena = Math.floor(num / 10);
        let unidad = num - (decena * 10);

        switch (decena) {
            case 1:
                switch (unidad) {
                    case 0: return 'DIEZ';
                    case 1: return 'ONCE';
                    case 2: return 'DOCE';
                    case 3: return 'TRECE';
                    case 4: return 'CATORCE';
                    case 5: return 'QUINCE';
                    default: return 'DIECI' + Unidades(unidad);
                }
            case 2:
                switch (unidad) {
                    case 0: return 'VEINTE';
                    default: return 'VEINTI' + Unidades(unidad);
                }
            case 3: return DecenasY('TREINTA', unidad);
            case 4: return DecenasY('CUARENTA', unidad);
            case 5: return DecenasY('CINCUENTA', unidad);
            case 6: return DecenasY('SESENTA', unidad);
            case 7: return DecenasY('SETENTA', unidad);
            case 8: return DecenasY('OCHENTA', unidad);
            case 9: return DecenasY('NOVENTA', unidad);
            case 0: return Unidades(unidad);
        }
    }//Unidades()

    function DecenasY(strSin, numUnidades) {
        if (numUnidades > 0)
            return strSin + ' Y ' + Unidades(numUnidades)

        return strSin;
    }//DecenasY()

    function Centenas(num) {
        let centenas = Math.floor(num / 100);
        let decenas = num - (centenas * 100);

        switch (centenas) {
            case 1:
                if (decenas > 0)
                    return 'CIENTO ' + Decenas(decenas);
                return 'CIEN';
            case 2: return 'DOSCIENTOS ' + Decenas(decenas);
            case 3: return 'TRESCIENTOS ' + Decenas(decenas);
            case 4: return 'CUATROCIENTOS ' + Decenas(decenas);
            case 5: return 'QUINIENTOS ' + Decenas(decenas);
            case 6: return 'SEISCIENTOS ' + Decenas(decenas);
            case 7: return 'SETECIENTOS ' + Decenas(decenas);
            case 8: return 'OCHOCIENTOS ' + Decenas(decenas);
            case 9: return 'NOVECIENTOS ' + Decenas(decenas);
        }

        return Decenas(decenas);
    }//Centenas()

    function Seccion(num, divisor, strSingular, strPlural) {
        let cientos = Math.floor(num / divisor)
        let resto = num - (cientos * divisor)

        let letras = '';

        if (cientos > 0)
            if (cientos > 1)
                letras = Centenas(cientos) + ' ' + strPlural;
            else
                letras = strSingular;

        if (resto > 0)
            letras += '';

        return letras;
    }//Seccion()

    function Miles(num) {
        let divisor = 1000;
        let cientos = Math.floor(num / divisor)
        let resto = num - (cientos * divisor)

        let strMiles = Seccion(num, divisor, 'UN MIL', 'MIL');
        let strCentenas = Centenas(resto);

        if (strMiles == '')
            return strCentenas;

        return strMiles + ' ' + strCentenas;
    }//Miles()

    function Millones(num) {
        let divisor = 1000000;
        let cientos = Math.floor(num / divisor)
        let resto = num - (cientos * divisor)

        let strMillones = Seccion(num, divisor, 'UN MILLON DE', 'MILLONES DE');
        let strMiles = Miles(resto);

        if (strMillones == '')
            return strMiles;

        return strMillones + ' ' + strMiles;
    }//Millones()

    return function NumeroALetras(num, currency) {
        currency = currency || {};
        let data = {
            numero: num,
            enteros: Math.floor(num),
            centavos: (((Math.round(num * 100)) - (Math.floor(num) * 100))),
            letrasCentavos: '',
            letrasMonedaPlural: currency.plural || 'DÓLARES AMERICANOS',
            letrasMonedaSingular: currency.singular || 'DÓLAR AMERICANO',
            letrasMonedaCentavoPlural: currency.centPlural || 'CENTAVOS',
            letrasMonedaCentavoSingular: currency.centSingular || 'CENTAVO'
        };

        if (data.centavos > 0) {
            data.letrasCentavos = 'CON ' + (function () {
                if (data.centavos == 1)
                    return Millones(data.centavos) + ' ' + data.letrasMonedaCentavoSingular;
                else
                    return Millones(data.centavos) + ' ' + data.letrasMonedaCentavoPlural;
            })();
        };

        if (data.enteros == 0)
            return 'CERO ' + data.letrasMonedaPlural + ' ' + data.letrasCentavos;
        if (data.enteros == 1)
            return Millones(data.enteros) + ' ' + data.letrasMonedaSingular + ' ' + data.letrasCentavos;
        else
            return Millones(data.enteros) + ' ' + data.letrasMonedaPlural + ' ' + data.letrasCentavos;
    };

})();

// Modo de uso: 500,34 USD
/*
numeroALetras(500.34, {
    plural: 'DÓLARES ESTADOUNIDENSES',
    singular: 'DÓLAR ESTADOUNIDENSE',
    centPlural: 'CENTAVOS',
    centSingular: 'CENTAVO'
});
*/